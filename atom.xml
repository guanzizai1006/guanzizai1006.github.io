<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>【Bruce】|备战马拉松</title>
  
  <subtitle>厚德载物</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://liwenxue.top/"/>
  <updated>2018-10-13T11:15:23.429Z</updated>
  <id>https://liwenxue.top/</id>
  
  <author>
    <name>Bruce Lee</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Git 和 GitHub 的使用方法汇总</title>
    <link href="https://liwenxue.top/Git%E5%92%8CGitHub%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%E6%B1%87%E6%80%BB/"/>
    <id>https://liwenxue.top/Git和GitHub的使用方法汇总/</id>
    <published>2018-06-06T16:38:36.000Z</published>
    <updated>2018-10-13T11:15:23.429Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/fnng/archive/2011/08/25/2153807.html" target="_blank" rel="noopener">参考链接如下</a></p><h2 id="我们需要使用git在本地创建一个相同的项目。"><a href="#我们需要使用git在本地创建一个相同的项目。" class="headerlink" title="我们需要使用git在本地创建一个相同的项目。"></a>我们需要使用git在本地创建一个相同的项目。</h2><pre><code>&lt;pre&gt;$ makdir ~/hello-world    //创建一个项目hello-world$ cd ~/hello-world    //打开这个项目$ git init    //初始化 $ touch README$ git add README   //更新README文件$ git commit -m &apos;first commit&apos;//提交更新，并注释信息“first commit” $ git remote add origin git@github.com:defnngj/hello-world.git   //连接远程github项目  $ git push -u origin master   //将本地项目更新到github项目上去&lt;/pre&gt;源文档 &lt;https://www.cnblogs.com/fnng/archive/2011/08/25/2153807.html&gt; </code></pre><h2 id="Git的诞生"><a href="#Git的诞生" class="headerlink" title="Git的诞生"></a>Git的诞生</h2><pre><code>Linus Torvalds在1991年创建了开源系统Linux，在2002年以前，世界各地的志愿者把源代码文件通过diff的方式发给Linus，然后由Linus本人通过手工方式合并代码！然后，Linux系统已经发展了十年了，代码库之大让Linus很难继续通过手工方式管理了。源文档 &lt;http://www.testclass.net/git/git-github-start/&gt; </code></pre><h2 id="更改readme文件！！！"><a href="#更改readme文件！！！" class="headerlink" title="更改readme文件！！！"></a>更改readme文件！！！</h2><pre><code>第一步尝试失败：  &lt;pre&gt;Bruce Lee@Bruce MINGW64 ~/bruce_demo_pack (master)$ vim READMEBruce  Lee@Bruce MINGW64 ~/bruce_demo_pack (master)$ git push -u origin masterEverything up-to-dateBranch &apos;master&apos; set up to track remote branch &apos;master&apos; from &apos;origin&apos;.&lt;/pre&gt;单独更改了其中的README文件后，直接执行“git push -u origin master”语句，其并不能同步到GitHub网站上去。</code></pre><blockquote><p>Note:   在第一次远程链接某项目时，这一句，必不可少！<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote add origin git@github.com:guanzizai1006/bruce_demo_pack.git</span><br></pre></td></tr></table></figure></p></blockquote><p>  第二次尝试成功：<br>        <pre><br>        Bruce  Lee@Bruce MINGW64 ~/bruce_demo_pack (master)<br>        $ git commit -m “用git commit -m 提交更新”<br>        [master bffe44a] “用git commit -m 提交更新<br>         1 file changed, 11 insertions(+)<br>        </pre></p><p>  使用此命令，  </p><pre><code>&lt;pre&gt;$ git commit -m &quot;用git commit -m 提交更新&quot;  //双引号内是添加的评论内容,成功提交更新，下一步是要push上去！$ git push -u origin master Bruce  Lee@Bruce MINGW64 ~/bruce_demo_pack (master)$ git push -u origin masterCounting objects: 3, done.Delta compression using up to 4 threads.Compressing objects: 100% (2/2), done.Writing objects: 100% (3/3), 660 bytes | 660.00 KiB/s, done.Total 3 (delta 0), reused 0 (delta 0)To github.com:guanzizai1006/bruce_demo_pack.git   13cf1ed..bffe44a  master -&gt; masterBranch &apos;master&apos; set up to track remote branch &apos;master&apos; from &apos;origin&apos;.&lt;/pre&gt;</code></pre><h2 id="当本地项目中，新添加了一个-py-文件后，要上传到云端。"><a href="#当本地项目中，新添加了一个-py-文件后，要上传到云端。" class="headerlink" title="当本地项目中，新添加了一个 py 文件后，要上传到云端。"></a>当本地项目中，新添加了一个 py 文件后，要上传到云端。</h2><pre>$ git add one.py     //更新README文件$ git commit -m 'add the file named one.py'   //提交更新，并注释信息“first commit，用以说明本次更新的是啥” 源文档 <https: 25="" 2011="" www.cnblogs.com="" fnng="" archive="" 08="" 2153807.html=""> 【当然，这时候可以考虑，要不要远程连接github项目。 $ git remote add origin git@github.com:guanzizai1006/bruce_demo_pack.git】$ git push -u origin master//将本地项目更新到github项目上去</https:></pre><h2 id="克隆到本地。"><a href="#克隆到本地。" class="headerlink" title="克隆到本地。"></a>克隆到本地。</h2><p>（前期准备阶段）<br>首先，下载安装Git。</p><p>其次，通过Git生成本地公钥，并且将公钥添加到GitHub中。</p><p>最后，设置仓库人员的用户名和邮箱地址。</p><p>用  git clone   命令，克隆到目标路径。<br>（ssh 方式）</p><p><img src="http://pf6sbcbe5.bkt.clouddn.com/1.png" alt="克隆到本地"></p><p>或者  （http 方式）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$  git clone https://github.com/defnngj/project-name</span><br></pre></td></tr></table></figure><blockquote><p>“git add” 命令对当前目录下的文件添加跟踪。这个命令后面 加一个 点 . 则意味着路径下的所有文件<br>“git commit” 命令将添加文件提交到本地仓库。<br>“git push” 将本地项目提交到远程仓库GitHub。<br>除第一次下载项目需要通过 “git clone” 将项目克隆到本地外,后续再使用 “git pull” 命令时会直接将更新拉取到本地</p></blockquote><pre>$ git pull origin master</pre>源文档 <http: www.testclass.net="" git="" git-github-used=""> ## 命令行，windows进入别的盘符<pre>Bruce  Lee@Bruce MINGW64 ~$ cd /d</pre>Git的入门学习和使用。<https: 51694888="" blog.csdn.net="" tonyshengtan="" article="" details="">————————Linux下安装git 并下载码云仓库——————————————<pre>bruce@bruce-virtual-machine:~$ sudo apt-get install git[sudo] bruce 的密码： 正在读取软件包列表... 完成正在分析软件包的依赖关系树       正在读取状态信息... 完成       git 已经是最新版 (1:2.7.4-0ubuntu1.4)。升级了 0 个软件包，新安装了 0 个软件包，要卸载 0 个软件包，有 83 个软件包未被升级。</pre><ul><li><p>新建本地文件夹</p><pre>bruce@bruce-virtual-machine:~/桌面$ mkdir face_fatigue_detection</pre></li><li><p>克隆到本地</p><pre>bruce@bruce-virtual-machine:~/桌面/face_fatigue_detection$ git clone https://gitee.com/thc1234/face_fatigue_detection.git正克隆到 'face_fatigue_detection'...Username for 'https://gitee.com': guanzizai1006Password for 'https://Bruce@gitee.com': </pre></li><li><p>克隆完成啦</p><pre>bruce@bruce-virtual-machine:~/桌面/face_fatigue_detection$ git clone https://gitee.com/thc1234/face_fatigue_detection.git正克隆到 'face_fatigue_detection'...Username for 'https://gitee.com': guanzizai1006Password for 'https://guanzizai1006@gitee.com': remote: Enumerating objects: 405, done.remote: Counting objects: 100% (405/405), done.remote: Compressing objects: 100% (398/398), done.remote: Total 405 (delta 196), reused 0 (delta 0)接收对象中: 100% (405/405), 113.33 MiB | 1.23 MiB/s, 完成.处理 delta 中: 100% (196/196), 完成.</pre></li></ul><p>———————— Git配置 gitee码云————————————————————</p><p>由本地文件夹更新到云端的话，则只要命令行 ./push.sh 则可以完成了。</p><p>由云端更新到本地，只需要在本地目录下，执行  git pull 就OK了。</p><p>————————————————————————————————————</p><h2 id="查看当前路径的“完整路径”"><a href="#查看当前路径的“完整路径”" class="headerlink" title="查看当前路径的“完整路径”"></a>查看当前路径的“完整路径”</h2><p><img src="http://pf6sbcbe5.bkt.clouddn.com/2.png" alt="查看当前路径"></p><h2 id="新建本地文件夹后，克隆云端内容到本地目录"><a href="#新建本地文件夹后，克隆云端内容到本地目录" class="headerlink" title="新建本地文件夹后，克隆云端内容到本地目录"></a>新建本地文件夹后，克隆云端内容到本地目录</h2><p><img src="http://pf6sbcbe5.bkt.clouddn.com/3.png" alt="查看当前路径"></p><h2 id="运行sh文件，"><a href="#运行sh文件，" class="headerlink" title="运行sh文件，"></a>运行sh文件，</h2><p><img src="http://pf6sbcbe5.bkt.clouddn.com/4.png" alt="查看当前路径"></p><h2 id="sh-文件内容如下："><a href="#sh-文件内容如下：" class="headerlink" title="sh 文件内容如下："></a>sh 文件内容如下：</h2><pre>#!/bin/bashgit add ./*git commit -m "shell"git push</pre><p>截图如下<br><img src="http://pf6sbcbe5.bkt.clouddn.com/5.png" alt="查看当前路径"></p></https:></http:>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/fnng/archive/2011/08/25/2153807.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;参考链接如下&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;我们需要使用git在本地
      
    
    </summary>
    
      <category term="Git" scheme="https://liwenxue.top/categories/Git/"/>
    
    
      <category term="Git" scheme="https://liwenxue.top/tags/Git/"/>
    
      <category term="Github" scheme="https://liwenxue.top/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu16.04安装opencv2.4.13.6及配置环境</title>
    <link href="https://liwenxue.top/ubuntu16.04%E5%AE%89%E8%A3%85opencv2.4.13.6byBruce/"/>
    <id>https://liwenxue.top/ubuntu16.04安装opencv2.4.13.6byBruce/</id>
    <published>2018-04-01T12:00:01.000Z</published>
    <updated>2018-10-13T11:13:36.245Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Ubuntu16-04安装opencv2-4-13-6及配置环境"><a href="#Ubuntu16-04安装opencv2-4-13-6及配置环境" class="headerlink" title="Ubuntu16.04安装opencv2.4.13.6及配置环境"></a>Ubuntu16.04安装opencv2.4.13.6及配置环境</h1><h2 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段"></a>准备阶段</h2><p>官网下载源码包，存到Linux下的“下载”，并解压。<br>bruce@bruce-virtual-machine:~/下载$ unzip opencv-2.4.13.6.zip</p><h2 id="第一步-安装编译工具。"><a href="#第一步-安装编译工具。" class="headerlink" title="(第一步)安装编译工具。"></a>(第一步)安装编译工具。</h2><p>bruce@bruce-virtual-machine:~$ sudo apt-get install build-essential<br>则会显示以下内容<br>正在读取软件包列表… 完成<br>正在分析软件包的依赖关系树<br>正在读取状态信息… 完成<br>build-essential 已经是最新版 (12.1ubuntu2)。<br>升级了 0 个软件包，新安装了 0 个软件包，要卸载 0 个软件包，有 198 个软件包未被升级。</p><h2 id="第二步-安装依赖包，主要参考了如下2个文档，都包含了必备的包。"><a href="#第二步-安装依赖包，主要参考了如下2个文档，都包含了必备的包。" class="headerlink" title="(第二步)安装依赖包，主要参考了如下2个文档，都包含了必备的包。"></a>(第二步)安装依赖包，主要参考了如下2个文档，都包含了必备的包。</h2><h3 id="https-blog-csdn-net-maxujian3893-article-details-64125988（较少安装包）"><a href="#https-blog-csdn-net-maxujian3893-article-details-64125988（较少安装包）" class="headerlink" title="https://blog.csdn.net/maxujian3893/article/details/64125988（较少安装包）"></a><a href="https://blog.csdn.net/maxujian3893/article/details/64125988（较少安装包）" target="_blank" rel="noopener">https://blog.csdn.net/maxujian3893/article/details/64125988（较少安装包）</a></h3><p>下面依赖关系主要是为了能够支持读写图片以及视频sudo apt-get install  libgtk2.0-dev libavcodec-dev libavformat-dev  libtiff4-dev（独有，提示已经被废弃，bruce并未安装。在使用pyth Ubuntu下叫做python-dev，CentOS下叫做python-devel，标记一下。）  libswscale-dev libjasper-dev<br>安装cmake，请输入命令 sudo apt-get install cmake<br>安装pkg-config。请输入命令： sudo apt-get install pkg-config  它是一个提供从源代码中编译软件时查询已安装的库时使用的统一接口的计算机软件。Ps.下图是查询Linux是否安装了某个包的方法</p><h3 id="https-blog-csdn-net-u011557212-article-details-54706966-utm-source-itdadao-amp-utm-medium-referral-（较多安装包）"><a href="#https-blog-csdn-net-u011557212-article-details-54706966-utm-source-itdadao-amp-utm-medium-referral-（较多安装包）" class="headerlink" title="https://blog.csdn.net/u011557212/article/details/54706966?utm_source=itdadao&amp;utm_medium=referral （较多安装包）"></a><a href="https://blog.csdn.net/u011557212/article/details/54706966?utm_source=itdadao&amp;utm_medium=referral" target="_blank" rel="noopener">https://blog.csdn.net/u011557212/article/details/54706966?utm_source=itdadao&amp;utm_medium=referral</a> （较多安装包）</h3><p>安装依赖包<br>sudo apt-get install cmake git libgtk2.0-dev（失败，难道16.04要换成3.0而不是2.0？） pkg-config libavcodec-dev libavformat-dev libswscale-dev<br>安装可选包<br>sudo apt-get install python-dev python-numpy libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff-dev libjasper-dev libdc1394-22-dev</p><h2 id="源码-编译工具安装-依赖包的安装-三者全部搞定之后，接下来就是要编译啦！"><a href="#源码-编译工具安装-依赖包的安装-三者全部搞定之后，接下来就是要编译啦！" class="headerlink" title="源码+编译工具安装+依赖包的安装 三者全部搞定之后，接下来就是要编译啦！"></a>源码+编译工具安装+依赖包的安装 三者全部搞定之后，接下来就是要编译啦！</h2><ul><li>a.首先进入当前解压的源码包opencv所在目录opencv2.4.13.6  。使用的是cd命令或者是鼠标直接点击文件夹。</li><li>b.创建一个新的文件夹。输入指令： mkdir release</li><li>c.进入该release文件夹。输入指令：cd release</li><li>d.编译。输入命令：（最后在local接着的是两个点，不要忘了，最后直接复制粘贴进命令行）会比较耗时，比如会花费20分钟来编译，会有进度显示哒。<br>cmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local ..</li><li>e.开启线程(按照自己的配置,处理器核数*2)。输入命令： make -j4</li><li>f.sudo make install （这一步也很快）</li></ul><h2 id="opencv大致安装完毕，但还没结束哦。接下来就是要配置环境啦！不然还是没法用opencv的哦！"><a href="#opencv大致安装完毕，但还没结束哦。接下来就是要配置环境啦！不然还是没法用opencv的哦！" class="headerlink" title="opencv大致安装完毕，但还没结束哦。接下来就是要配置环境啦！不然还是没法用opencv的哦！"></a>opencv大致安装完毕，但还没结束哦。接下来就是要配置环境啦！不然还是没法用opencv的哦！</h2><ul><li>a.在文件/etc/ld.so.conf中添加 /usr/local/lib (这里就是上文中您的安装目录下的)</li><li>b.当我们打开、/etc/ld.so.conf文件时，发现它的属性为只读，则终端上输入以下命令： sudo chmod 666 /etc/ld.so.conf 改变文件属性为允许所有用户对该文件进行读写操作然后另起一行输入/usr/local/lib了。</li><li>c.完成动态库的共享。请输入 sudo ldconfig –v<h2 id="接下来，配置opencv的头文件位置！"><a href="#接下来，配置opencv的头文件位置！" class="headerlink" title="接下来，配置opencv的头文件位置！"></a>接下来，配置opencv的头文件位置！</h2></li><li>a.输入命令： sudo gedit /etc/bash.bashrc   进入编辑页面。</li><li>b.在编辑命令输入以下内容：<br>PKG_CONFIG_PATH=$PKG_CONFIG_PATH:/usr/local/lib/pkgconfig  并保存下来。</li><li>c.终端输入命令：<br>export PKG_CONFIG_PATH</li><li>d.使配置生效。终端输入命令:<br>sudo source /etc/bash.bashrc  的</li><li>e.由于source为root命令，需要root权限。<br>输入命令：su bruce（bruce为我本人的用户名，请换成您自己的）然后按提示进行。</li><li>f.再次使配置生效。终端输入命令：<br>  source /etc/bash.bashrc</li><li>g.退出。终端输入命令：quit()或者直接键盘按住 Ctrl+D 这两个按键。</li><li>h.更新database。终端输入命令：  sudo updatedb   </li></ul><h2 id="选择一个demo进行测试。"><a href="#选择一个demo进行测试。" class="headerlink" title="选择一个demo进行测试。"></a>选择一个demo进行测试。</h2><p>完工啦！！！哈哈，最后就可以来测试我们是否搞定这个opencv的配置啦</p><ul><li>a.在解压的opencv目录下找到 samples/c/文件夹。在该文件夹下输入终端指令：   ./build_all.sh    (这一步将会花费大概1分钟左右时间编译)</li><li>b.编译完成后，选一个运行，比如 find_obj 程序。<br>该文件夹下终端输入：  ./ find_obj    嘻嘻，一两秒内有看到图片了吧</li></ul><h2 id="python与opencv的接口配置。"><a href="#python与opencv的接口配置。" class="headerlink" title="python与opencv的接口配置。"></a>python与opencv的接口配置。</h2><p>ubuntu16.04自带python2.7和python3.5。在安装完Opencv后，我们安装Python-opencv，<br>请在终端输入命令 ： sudo apt-get install python-opencv<br>也可以安装python-numpy ： sudo apt-get install python-numpy<br>终端输入： cd ~ 进入根目录。<br>再输入python  回车键后，显示python的版本信息，<br>最后输入import cv  ,如果没有弹出任何信息，说明接口配置成功。</p><ul><li><p>参考资料：<br>【1】    <a href="https://blog.csdn.net/maxujian3893/article/details/64125988" target="_blank" rel="noopener">https://blog.csdn.net/maxujian3893/article/details/64125988</a><br>【2】    <a href="https://blog.csdn.net/u011557212/article/details/54706966?utm_source=itdadao&amp;utm_medium=referral" target="_blank" rel="noopener">https://blog.csdn.net/u011557212/article/details/54706966?utm_source=itdadao&amp;utm_medium=referral</a></p></li><li><p>p.s. 相关问题。<br>打开 vi 可以，不过应该是乱码。直接运行吧<br>比如说 你写了一个 c程序 helloworld.c<br>你用命令gcc -o helloworld.o helloworld.c<br>就会生成一个可执行的文件 helloworld.o<br>用命令 ./helloworld.o就可以执行了<br>（注意 点斜杠 是运行，有一点的）</p></li></ul><p>– </p><h3 id="嘿嘿，偷懒了，部分步骤图我还没有添加上来，等过几天闲下来了再加上来！！"><a href="#嘿嘿，偷懒了，部分步骤图我还没有添加上来，等过几天闲下来了再加上来！！" class="headerlink" title="嘿嘿，偷懒了，部分步骤图我还没有添加上来，等过几天闲下来了再加上来！！"></a>嘿嘿，偷懒了，部分步骤图我还没有添加上来，等过几天闲下来了再加上来！！</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Ubuntu16-04安装opencv2-4-13-6及配置环境&quot;&gt;&lt;a href=&quot;#Ubuntu16-04安装opencv2-4-13-6及配置环境&quot; class=&quot;headerlink&quot; title=&quot;Ubuntu16.04安装opencv2.4.13.6及
      
    
    </summary>
    
      <category term="ubuntu" scheme="https://liwenxue.top/categories/ubuntu/"/>
    
    
      <category term="ubuntu，opencv，安装" scheme="https://liwenxue.top/tags/ubuntu%EF%BC%8Copencv%EF%BC%8C%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>face2ai社区成立啦！</title>
    <link href="https://liwenxue.top/face2%E7%A4%BE%E5%8C%BA%E6%88%90%E7%AB%8B%E5%95%A6/"/>
    <id>https://liwenxue.top/face2社区成立啦/</id>
    <published>2018-03-21T12:00:01.000Z</published>
    <updated>2018-10-13T11:09:02.913Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>欢迎各位！共同成长进步！</p></blockquote><h2 id="人工智能基础"><a href="#人工智能基础" class="headerlink" title="人工智能基础"></a>人工智能基础</h2><h2 id="links：https-www-face2ai-com"><a href="#links：https-www-face2ai-com" class="headerlink" title="links：https://www.face2ai.com/"></a>links：<a href="https://www.face2ai.com/" target="_blank" rel="noopener">https://www.face2ai.com/</a></h2><h2 id="欢迎来访！"><a href="#欢迎来访！" class="headerlink" title="欢迎来访！"></a>欢迎来访！</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;欢迎各位！共同成长进步！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;人工智能基础&quot;&gt;&lt;a href=&quot;#人工智能基础&quot; class=&quot;headerlink&quot; title=&quot;人工智能基础&quot;&gt;&lt;/a&gt;人工智能基础&lt;/h2&gt;&lt;h2 id=&quot;li
      
    
    </summary>
    
      <category term="人工智能平台" scheme="https://liwenxue.top/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%B9%B3%E5%8F%B0/"/>
    
    
      <category term="社区平台建设" scheme="https://liwenxue.top/tags/%E7%A4%BE%E5%8C%BA%E5%B9%B3%E5%8F%B0%E5%BB%BA%E8%AE%BE/"/>
    
      <category term="人工智能" scheme="https://liwenxue.top/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
  </entry>
  
</feed>
